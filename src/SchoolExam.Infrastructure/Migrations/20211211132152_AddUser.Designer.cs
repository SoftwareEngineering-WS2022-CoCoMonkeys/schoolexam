// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SchoolExam.Infrastructure.DataContext;

#nullable disable

namespace SchoolExam.Infrastructure.Migrations
{
    [DbContext(typeof(SchoolExamDbContext))]
    [Migration("20211211132152_AddUser")]
    partial class AddUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.CourseAggregate.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2021);

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.ExamAggregate.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GradingTableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GradingTableId");

                    b.ToTable("Exam", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.ExamAggregate.ExamBooklet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamBooklet", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.ExamAggregate.ExamBookletPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExamBookletId")
                        .HasColumnType("uuid");

                    b.Property<int>("Page")
                        .HasColumnType("integer");

                    b.Property<byte[]>("QrCode")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("ExamBookletId");

                    b.HasIndex("QrCode")
                        .IsUnique();

                    b.ToTable("ExamBookletPage", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.ExamAggregate.ExamTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamTask", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.ExamAggregate.GradingTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("GradingTable", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.PersonAggregate.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Person", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.SchoolAggregate.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("HasScanner")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("School", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.SubmissionAggregate.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AchievedPoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExamTaskId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExamTaskId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.SubmissionAggregate.Input", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Input", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Input");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.SubmissionAggregate.Remark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnswerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InputId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubmissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("InputId")
                        .IsUnique();

                    b.HasIndex("SubmissionId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Remark", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.SubmissionAggregate.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AchievedPoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("BookletId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExamBookletId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDigital")
                        .HasColumnType("boolean");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExamBookletId");

                    b.HasIndex("StudentId");

                    b.ToTable("Submission", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.SubmissionAggregate.SubmissionPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Page")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ScanData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid?>("SubmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("SubmissionPage", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.TaskAggregate.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Core.UserManagement.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("640b0338-f0d0-4033-9c13-9f021417cae7"),
                            Password = "$2a$11$3Q8Re.PhjBIPqPIqzAy3Y./XFRjcelEOr7kL0X27ljVbay1PwTMw2",
                            Role = "Administrator",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("SchoolTeacher", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("SchoolId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SchoolTeacher");
                });

            modelBuilder.Entity("StudentLegalGuardian", b =>
                {
                    b.Property<Guid>("LegalGuardianId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("LegalGuardianId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLegalGuardian");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.PersonAggregate.LegalGuardian", b =>
                {
                    b.HasBaseType("SchoolExam.Core.Domain.PersonAggregate.Person");

                    b.HasDiscriminator().HasValue("LegalGuardian");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.PersonAggregate.Student", b =>
                {
                    b.HasBaseType("SchoolExam.Core.Domain.PersonAggregate.Person");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.PersonAggregate.Teacher", b =>
                {
                    b.HasBaseType("SchoolExam.Core.Domain.PersonAggregate.Person");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.SubmissionAggregate.TextInput", b =>
                {
                    b.HasBaseType("SchoolExam.Core.Domain.SubmissionAggregate.Input");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("TextInput");
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("SchoolExam.Core.Domain.CourseAggregate.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolExam.Core.Domain.PersonAggregate.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.CourseAggregate.Course", b =>
                {
                    b.HasOne("SchoolExam.Core.Domain.PersonAggregate.Teacher", null)
                        .WithMany("_courses")
                        .HasForeignKey("TeacherId");

                    b.OwnsOne("SchoolExam.Core.Domain.ValueObjects.Subject", "Subject", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text")
                                .HasColumnName("Subject");

                            b1.HasKey("CourseId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.ExamAggregate.Exam", b =>
                {
                    b.HasOne("SchoolExam.Core.Domain.CourseAggregate.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolExam.Core.Domain.ExamAggregate.GradingTable", "GradingTable")
                        .WithMany()
                        .HasForeignKey("GradingTableId");

                    b.Navigation("GradingTable");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.ExamAggregate.ExamBooklet", b =>
                {
                    b.HasOne("SchoolExam.Core.Domain.ExamAggregate.Exam", null)
                        .WithMany("Booklets")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.ExamAggregate.ExamBookletPage", b =>
                {
                    b.HasOne("SchoolExam.Core.Domain.ExamAggregate.ExamBooklet", null)
                        .WithMany("Pages")
                        .HasForeignKey("ExamBookletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.ExamAggregate.ExamTask", b =>
                {
                    b.HasOne("SchoolExam.Core.Domain.ExamAggregate.Exam", null)
                        .WithMany("Tasks")
                        .HasForeignKey("ExamId");

                    b.OwnsOne("SchoolExam.Core.Domain.ValueObjects.ExamTaskPosition", "Position", b1 =>
                        {
                            b1.Property<Guid>("ExamTaskId")
                                .HasColumnType("uuid");

                            b1.HasKey("ExamTaskId");

                            b1.ToTable("ExamTask");

                            b1.WithOwner()
                                .HasForeignKey("ExamTaskId");

                            b1.OwnsOne("SchoolExam.Core.Domain.ValueObjects.ExamPosition", "End", b2 =>
                                {
                                    b2.Property<Guid>("ExamTaskPositionExamTaskId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Page")
                                        .HasColumnType("integer")
                                        .HasColumnName("EndPage");

                                    b2.Property<double>("Y")
                                        .HasColumnType("double precision")
                                        .HasColumnName("EndY");

                                    b2.HasKey("ExamTaskPositionExamTaskId");

                                    b2.ToTable("ExamTask");

                                    b2.WithOwner()
                                        .HasForeignKey("ExamTaskPositionExamTaskId");
                                });

                            b1.OwnsOne("SchoolExam.Core.Domain.ValueObjects.ExamPosition", "Start", b2 =>
                                {
                                    b2.Property<Guid>("ExamTaskPositionExamTaskId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Page")
                                        .HasColumnType("integer")
                                        .HasColumnName("StartPage");

                                    b2.Property<double>("Y")
                                        .HasColumnType("double precision")
                                        .HasColumnName("StartY");

                                    b2.HasKey("ExamTaskPositionExamTaskId");

                                    b2.ToTable("ExamTask");

                                    b2.WithOwner()
                                        .HasForeignKey("ExamTaskPositionExamTaskId");
                                });

                            b1.Navigation("End")
                                .IsRequired();

                            b1.Navigation("Start")
                                .IsRequired();
                        });

                    b.Navigation("Position")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.ExamAggregate.GradingTable", b =>
                {
                    b.OwnsMany("SchoolExam.Core.Domain.ValueObjects.GradingTableInterval", "Intervals", b1 =>
                        {
                            b1.Property<Guid>("GradingTableId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<double>("Grade")
                                .HasColumnType("double precision")
                                .HasColumnName("Grade");

                            b1.HasKey("GradingTableId", "Id");

                            b1.ToTable("GradingTableInterval");

                            b1.WithOwner()
                                .HasForeignKey("GradingTableId");

                            b1.OwnsOne("SchoolExam.Core.Domain.ValueObjects.GradingTableIntervalBound", "End", b2 =>
                                {
                                    b2.Property<Guid>("GradingTableIntervalGradingTableId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("GradingTableIntervalId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Points")
                                        .HasColumnType("integer")
                                        .HasColumnName("EndPoints");

                                    b2.Property<int>("Type")
                                        .HasColumnType("integer")
                                        .HasColumnName("EndType");

                                    b2.HasKey("GradingTableIntervalGradingTableId", "GradingTableIntervalId");

                                    b2.ToTable("GradingTableInterval");

                                    b2.WithOwner()
                                        .HasForeignKey("GradingTableIntervalGradingTableId", "GradingTableIntervalId");
                                });

                            b1.OwnsOne("SchoolExam.Core.Domain.ValueObjects.GradingTableIntervalBound", "Start", b2 =>
                                {
                                    b2.Property<Guid>("GradingTableIntervalGradingTableId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("GradingTableIntervalId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Points")
                                        .HasColumnType("integer")
                                        .HasColumnName("StartPoints");

                                    b2.Property<int>("Type")
                                        .HasColumnType("integer")
                                        .HasColumnName("StartType");

                                    b2.HasKey("GradingTableIntervalGradingTableId", "GradingTableIntervalId");

                                    b2.ToTable("GradingTableInterval");

                                    b2.WithOwner()
                                        .HasForeignKey("GradingTableIntervalGradingTableId", "GradingTableIntervalId");
                                });

                            b1.Navigation("End")
                                .IsRequired();

                            b1.Navigation("Start")
                                .IsRequired();
                        });

                    b.Navigation("Intervals");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.PersonAggregate.Person", b =>
                {
                    b.OwnsOne("SchoolExam.Core.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Country");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetName");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetNumber");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.SchoolAggregate.School", b =>
                {
                    b.OwnsOne("SchoolExam.Core.Domain.ValueObjects.Address", "Location", b1 =>
                        {
                            b1.Property<Guid>("SchoolId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Country");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetName");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetNumber");

                            b1.HasKey("SchoolId");

                            b1.ToTable("School");

                            b1.WithOwner()
                                .HasForeignKey("SchoolId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.SubmissionAggregate.Answer", b =>
                {
                    b.HasOne("SchoolExam.Core.Domain.ExamAggregate.ExamTask", null)
                        .WithMany()
                        .HasForeignKey("ExamTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolExam.Core.Domain.SubmissionAggregate.Submission", null)
                        .WithMany("Answers")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.SubmissionAggregate.Remark", b =>
                {
                    b.HasOne("SchoolExam.Core.Domain.SubmissionAggregate.Answer", null)
                        .WithMany("Remarks")
                        .HasForeignKey("AnswerId");

                    b.HasOne("SchoolExam.Core.Domain.SubmissionAggregate.Input", "Input")
                        .WithOne()
                        .HasForeignKey("SchoolExam.Core.Domain.SubmissionAggregate.Remark", "InputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolExam.Core.Domain.SubmissionAggregate.Submission", null)
                        .WithMany("Remarks")
                        .HasForeignKey("SubmissionId");

                    b.HasOne("SchoolExam.Core.Domain.PersonAggregate.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Input");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.SubmissionAggregate.Submission", b =>
                {
                    b.HasOne("SchoolExam.Core.Domain.ExamAggregate.ExamBooklet", null)
                        .WithMany()
                        .HasForeignKey("ExamBookletId");

                    b.HasOne("SchoolExam.Core.Domain.PersonAggregate.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.SubmissionAggregate.SubmissionPage", b =>
                {
                    b.HasOne("SchoolExam.Core.Domain.SubmissionAggregate.Submission", null)
                        .WithMany("Pages")
                        .HasForeignKey("SubmissionId");
                });

            modelBuilder.Entity("SchoolExam.Core.UserManagement.UserAggregate.User", b =>
                {
                    b.HasOne("SchoolExam.Core.Domain.PersonAggregate.Person", null)
                        .WithOne()
                        .HasForeignKey("SchoolExam.Core.UserManagement.UserAggregate.User", "PersonId");
                });

            modelBuilder.Entity("SchoolTeacher", b =>
                {
                    b.HasOne("SchoolExam.Core.Domain.SchoolAggregate.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolExam.Core.Domain.PersonAggregate.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentLegalGuardian", b =>
                {
                    b.HasOne("SchoolExam.Core.Domain.PersonAggregate.LegalGuardian", null)
                        .WithMany()
                        .HasForeignKey("LegalGuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolExam.Core.Domain.PersonAggregate.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.ExamAggregate.Exam", b =>
                {
                    b.Navigation("Booklets");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.ExamAggregate.ExamBooklet", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.SubmissionAggregate.Answer", b =>
                {
                    b.Navigation("Remarks");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.SubmissionAggregate.Submission", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Pages");

                    b.Navigation("Remarks");
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.PersonAggregate.Teacher", b =>
                {
                    b.Navigation("_courses");
                });
#pragma warning restore 612, 618
        }
    }
}
