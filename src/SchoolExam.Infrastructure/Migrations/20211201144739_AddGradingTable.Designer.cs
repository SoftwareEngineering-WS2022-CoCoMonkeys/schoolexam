// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SchoolExam.Infrastructure.DataContext;

#nullable disable

namespace SchoolExam.Infrastructure.Migrations
{
    [DbContext(typeof(SchoolExamDbContext))]
    [Migration("20211201144739_AddGradingTable")]
    partial class AddGradingTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SchoolExam.Core.Domain.CourseAggregate.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2021);

                    b.HasKey("Id");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.ExamAggregate.GradingTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("TempId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("TempId");

                    b.ToTable("GradingTable", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.CourseAggregate.Course", b =>
                {
                    b.OwnsOne("SchoolExam.Core.Domain.ValueObjects.Subject", "Subject", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text")
                                .HasColumnName("Subject");

                            b1.HasKey("CourseId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.Navigation("Subject")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Core.Domain.ExamAggregate.GradingTable", b =>
                {
                    b.OwnsMany("SchoolExam.Core.Domain.ValueObjects.GradingTableInterval", "Intervals", b1 =>
                        {
                            b1.Property<Guid>("GradingTableId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<double>("Grade")
                                .HasColumnType("double precision")
                                .HasColumnName("Grade");

                            b1.HasKey("GradingTableId", "Id");

                            b1.ToTable("GradingTableInterval");

                            b1.WithOwner()
                                .HasForeignKey("GradingTableId");

                            b1.OwnsOne("SchoolExam.Core.Domain.ValueObjects.GradingTableIntervalBound", "End", b2 =>
                                {
                                    b2.Property<Guid>("GradingTableIntervalGradingTableId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("GradingTableIntervalId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Points")
                                        .HasColumnType("integer")
                                        .HasColumnName("EndPoints");

                                    b2.Property<int>("Type")
                                        .HasColumnType("integer")
                                        .HasColumnName("EndType");

                                    b2.HasKey("GradingTableIntervalGradingTableId", "GradingTableIntervalId");

                                    b2.ToTable("GradingTableInterval");

                                    b2.WithOwner()
                                        .HasForeignKey("GradingTableIntervalGradingTableId", "GradingTableIntervalId");
                                });

                            b1.OwnsOne("SchoolExam.Core.Domain.ValueObjects.GradingTableIntervalBound", "Start", b2 =>
                                {
                                    b2.Property<Guid>("GradingTableIntervalGradingTableId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("GradingTableIntervalId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Points")
                                        .HasColumnType("integer")
                                        .HasColumnName("StartPoints");

                                    b2.Property<int>("Type")
                                        .HasColumnType("integer")
                                        .HasColumnName("StartType");

                                    b2.HasKey("GradingTableIntervalGradingTableId", "GradingTableIntervalId");

                                    b2.ToTable("GradingTableInterval");

                                    b2.WithOwner()
                                        .HasForeignKey("GradingTableIntervalGradingTableId", "GradingTableIntervalId");
                                });

                            b1.Navigation("End")
                                .IsRequired();

                            b1.Navigation("Start")
                                .IsRequired();
                        });

                    b.Navigation("Intervals");
                });
#pragma warning restore 612, 618
        }
    }
}
