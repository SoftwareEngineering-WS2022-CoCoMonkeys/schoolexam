// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SchoolExam.Persistence.DataContext;

#nullable disable

namespace SchoolExam.Persistence.Migrations
{
    [DbContext(typeof(SchoolExamDbContext))]
    partial class SchoolExamDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SchoolExam.Domain.Base.FileBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UploaderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UploaderId");

                    b.ToTable("File", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("FileBase");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.CourseAggregate.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.CourseAggregate.CourseStudent", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseStudent", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.CourseAggregate.CourseTeacher", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("CourseTeacher", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.Booklet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("Booklet", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.BookletPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookletId")
                        .HasColumnType("uuid");

                    b.Property<int>("Page")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookletId");

                    b.ToTable("BookletPage", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Exam", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.ExamParticipant", b =>
                {
                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.HasKey("ExamId", "ParticipantId");

                    b.ToTable("ExamParticipant");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.ExamTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid");

                    b.Property<double>("MaxPoints")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamTask", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.GradingTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExamId")
                        .IsUnique();

                    b.ToTable("GradingTable", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.ScheduledExam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExamId")
                        .IsUnique();

                    b.ToTable("ScheduledExam", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.PersonAggregate.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Person", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.PersonAggregate.StudentLegalGuardian", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LegalGuardianId")
                        .HasColumnType("uuid");

                    b.HasKey("StudentId", "LegalGuardianId");

                    b.HasIndex("LegalGuardianId");

                    b.ToTable("StudentLegalGuardian", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SchoolAggregate.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("School", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("AchievedPoints")
                        .HasColumnType("double precision");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("TaskId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.AnswerSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.ToTable("AnswerSegment", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookletId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookletId")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("Submission", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.SubmissionPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BookletPageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookletPageId")
                        .IsUnique();

                    b.HasIndex("ExamId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("SubmissionPage", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.BookletPdfFile", b =>
                {
                    b.HasBaseType("SchoolExam.Domain.Base.FileBase");

                    b.Property<Guid>("BookletId")
                        .HasColumnType("uuid");

                    b.HasIndex("BookletId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("BookletPdfFile");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.ExamCourse", b =>
                {
                    b.HasBaseType("SchoolExam.Domain.Entities.ExamAggregate.ExamParticipant");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ExamCourse", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.ExamStudent", b =>
                {
                    b.HasBaseType("SchoolExam.Domain.Entities.ExamAggregate.ExamParticipant");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ExamStudent", (string)null);
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.TaskPdfFile", b =>
                {
                    b.HasBaseType("SchoolExam.Domain.Base.FileBase");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid");

                    b.HasIndex("ExamId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("TaskPdfFile");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.PersonAggregate.LegalGuardian", b =>
                {
                    b.HasBaseType("SchoolExam.Domain.Entities.PersonAggregate.Person");

                    b.HasDiscriminator().HasValue("LegalGuardian");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.PersonAggregate.Student", b =>
                {
                    b.HasBaseType("SchoolExam.Domain.Entities.PersonAggregate.Person");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.PersonAggregate.Teacher", b =>
                {
                    b.HasBaseType("SchoolExam.Domain.Entities.PersonAggregate.Person");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid")
                        .HasColumnName("Teacher_SchoolId");

                    b.HasIndex("SchoolId");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.RemarkPdfFile", b =>
                {
                    b.HasBaseType("SchoolExam.Domain.Base.FileBase");

                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uuid");

                    b.HasIndex("SubmissionId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("RemarkPdfFile");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.SubmissionPagePdfFile", b =>
                {
                    b.HasBaseType("SchoolExam.Domain.Base.FileBase");

                    b.Property<Guid>("SubmissionPageId")
                        .HasColumnType("uuid");

                    b.HasIndex("SubmissionPageId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("SubmissionPagePdfFile");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.SubmissionPdfFile", b =>
                {
                    b.HasBaseType("SchoolExam.Domain.Base.FileBase");

                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("SubmissionPdfFile_SubmissionId");

                    b.HasIndex("SubmissionId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("SubmissionPdfFile");
                });

            modelBuilder.Entity("SchoolExam.Domain.Base.FileBase", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.UserAggregate.User", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.CourseAggregate.Course", b =>
                {
                    b.OwnsOne("SchoolExam.Domain.ValueObjects.Topic", "Topic", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text")
                                .HasColumnName("Topic");

                            b1.HasKey("CourseId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.CourseAggregate.CourseStudent", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.CourseAggregate.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolExam.Domain.Entities.PersonAggregate.Student", "Student")
                        .WithMany("Courses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.CourseAggregate.CourseTeacher", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.CourseAggregate.Course", "Course")
                        .WithMany("Teachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolExam.Domain.Entities.PersonAggregate.Teacher", null)
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.Booklet", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.ExamAggregate.Exam", "Exam")
                        .WithMany("Booklets")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.BookletPage", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.ExamAggregate.Booklet", null)
                        .WithMany("Pages")
                        .HasForeignKey("BookletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SchoolExam.Domain.ValueObjects.QrCode", "QrCode", b1 =>
                        {
                            b1.Property<Guid>("BookletPageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Data")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("QrCodeData");

                            b1.HasKey("BookletPageId");

                            b1.HasIndex("Data")
                                .IsUnique();

                            b1.ToTable("BookletPage");

                            b1.WithOwner()
                                .HasForeignKey("BookletPageId");
                        });

                    b.Navigation("QrCode")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.Exam", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.PersonAggregate.Teacher", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SchoolExam.Domain.ValueObjects.Topic", "Topic", b1 =>
                        {
                            b1.Property<Guid>("ExamId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Topic");

                            b1.HasKey("ExamId");

                            b1.ToTable("Exam");

                            b1.WithOwner()
                                .HasForeignKey("ExamId");
                        });

                    b.Navigation("Topic")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.ExamParticipant", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.ExamAggregate.Exam", null)
                        .WithMany("Participants")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.ExamTask", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.ExamAggregate.Exam", null)
                        .WithMany("Tasks")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SchoolExam.Domain.ValueObjects.ExamPosition", "End", b1 =>
                        {
                            b1.Property<Guid>("ExamTaskId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Page")
                                .HasColumnType("integer")
                                .HasColumnName("EndPage");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision")
                                .HasColumnName("EndY");

                            b1.HasKey("ExamTaskId");

                            b1.ToTable("ExamTask");

                            b1.WithOwner()
                                .HasForeignKey("ExamTaskId");
                        });

                    b.OwnsOne("SchoolExam.Domain.ValueObjects.ExamPosition", "Start", b1 =>
                        {
                            b1.Property<Guid>("ExamTaskId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Page")
                                .HasColumnType("integer")
                                .HasColumnName("StartPage");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision")
                                .HasColumnName("StartY");

                            b1.HasKey("ExamTaskId");

                            b1.ToTable("ExamTask");

                            b1.WithOwner()
                                .HasForeignKey("ExamTaskId");
                        });

                    b.Navigation("End")
                        .IsRequired();

                    b.Navigation("Start")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.GradingTable", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.ExamAggregate.Exam", null)
                        .WithOne("GradingTable")
                        .HasForeignKey("SchoolExam.Domain.Entities.ExamAggregate.GradingTable", "ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("SchoolExam.Domain.ValueObjects.GradingTableInterval", "Intervals", b1 =>
                        {
                            b1.Property<Guid>("GradingTableId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Grade")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Grade");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("Type");

                            b1.HasKey("GradingTableId", "Id");

                            b1.ToTable("GradingTableInterval");

                            b1.WithOwner("GradingTable")
                                .HasForeignKey("GradingTableId");

                            b1.OwnsOne("SchoolExam.Domain.ValueObjects.GradingTableIntervalBound", "End", b2 =>
                                {
                                    b2.Property<Guid>("GradingTableIntervalGradingTableId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("GradingTableIntervalId")
                                        .HasColumnType("integer");

                                    b2.Property<double>("Points")
                                        .HasColumnType("double precision")
                                        .HasColumnName("EndPoints");

                                    b2.Property<int>("Type")
                                        .HasColumnType("integer")
                                        .HasColumnName("EndType");

                                    b2.HasKey("GradingTableIntervalGradingTableId", "GradingTableIntervalId");

                                    b2.ToTable("GradingTableInterval");

                                    b2.WithOwner()
                                        .HasForeignKey("GradingTableIntervalGradingTableId", "GradingTableIntervalId");
                                });

                            b1.OwnsOne("SchoolExam.Domain.ValueObjects.GradingTableIntervalBound", "Start", b2 =>
                                {
                                    b2.Property<Guid>("GradingTableIntervalGradingTableId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("GradingTableIntervalId")
                                        .HasColumnType("integer");

                                    b2.Property<double>("Points")
                                        .HasColumnType("double precision")
                                        .HasColumnName("StartPoints");

                                    b2.Property<int>("Type")
                                        .HasColumnType("integer")
                                        .HasColumnName("StartType");

                                    b2.HasKey("GradingTableIntervalGradingTableId", "GradingTableIntervalId");

                                    b2.ToTable("GradingTableInterval");

                                    b2.WithOwner()
                                        .HasForeignKey("GradingTableIntervalGradingTableId", "GradingTableIntervalId");
                                });

                            b1.Navigation("End")
                                .IsRequired();

                            b1.Navigation("GradingTable");

                            b1.Navigation("Start")
                                .IsRequired();
                        });

                    b.Navigation("Intervals");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.ScheduledExam", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.ExamAggregate.Exam", "Exam")
                        .WithOne()
                        .HasForeignKey("SchoolExam.Domain.Entities.ExamAggregate.ScheduledExam", "ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.PersonAggregate.Person", b =>
                {
                    b.OwnsOne("SchoolExam.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Country");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetName");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetNumber");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.PersonAggregate.StudentLegalGuardian", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.PersonAggregate.LegalGuardian", null)
                        .WithMany("Children")
                        .HasForeignKey("LegalGuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolExam.Domain.Entities.PersonAggregate.Student", null)
                        .WithMany("LegalGuardians")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SchoolAggregate.School", b =>
                {
                    b.OwnsOne("SchoolExam.Domain.ValueObjects.Address", "Location", b1 =>
                        {
                            b1.Property<Guid>("SchoolId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Country");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetName");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetNumber");

                            b1.HasKey("SchoolId");

                            b1.ToTable("School");

                            b1.WithOwner()
                                .HasForeignKey("SchoolId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.Answer", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.SubmissionAggregate.Submission", null)
                        .WithMany("Answers")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolExam.Domain.Entities.ExamAggregate.ExamTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.AnswerSegment", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.SubmissionAggregate.Answer", null)
                        .WithMany("Segments")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SchoolExam.Domain.ValueObjects.ExamPosition", "End", b1 =>
                        {
                            b1.Property<Guid>("AnswerSegmentId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Page")
                                .HasColumnType("integer")
                                .HasColumnName("EndPage");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision")
                                .HasColumnName("EndY");

                            b1.HasKey("AnswerSegmentId");

                            b1.ToTable("AnswerSegment");

                            b1.WithOwner()
                                .HasForeignKey("AnswerSegmentId");
                        });

                    b.OwnsOne("SchoolExam.Domain.ValueObjects.ExamPosition", "Start", b1 =>
                        {
                            b1.Property<Guid>("AnswerSegmentId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Page")
                                .HasColumnType("integer")
                                .HasColumnName("StartPage");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision")
                                .HasColumnName("StartY");

                            b1.HasKey("AnswerSegmentId");

                            b1.ToTable("AnswerSegment");

                            b1.WithOwner()
                                .HasForeignKey("AnswerSegmentId");
                        });

                    b.Navigation("End")
                        .IsRequired();

                    b.Navigation("Start")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.Submission", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.ExamAggregate.Booklet", "Booklet")
                        .WithOne("Submission")
                        .HasForeignKey("SchoolExam.Domain.Entities.SubmissionAggregate.Submission", "BookletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolExam.Domain.Entities.PersonAggregate.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Booklet");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.SubmissionPage", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.ExamAggregate.BookletPage", null)
                        .WithOne("SubmissionPage")
                        .HasForeignKey("SchoolExam.Domain.Entities.SubmissionAggregate.SubmissionPage", "BookletPageId");

                    b.HasOne("SchoolExam.Domain.Entities.ExamAggregate.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolExam.Domain.Entities.SubmissionAggregate.Submission", null)
                        .WithMany("Pages")
                        .HasForeignKey("SubmissionId");

                    b.OwnsOne("SchoolExam.Domain.ValueObjects.QrCode", "StudentQrCode", b1 =>
                        {
                            b1.Property<Guid>("SubmissionPageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Data")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("QrCodeData");

                            b1.HasKey("SubmissionPageId");

                            b1.HasIndex("Data");

                            b1.ToTable("SubmissionPage");

                            b1.WithOwner()
                                .HasForeignKey("SubmissionPageId");
                        });

                    b.Navigation("StudentQrCode");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.UserAggregate.User", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.PersonAggregate.Person", "Person")
                        .WithOne()
                        .HasForeignKey("SchoolExam.Domain.Entities.UserAggregate.User", "PersonId");

                    b.OwnsOne("SchoolExam.Domain.ValueObjects.Role", "Role", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Role");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Person");

                    b.Navigation("Role")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.BookletPdfFile", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.ExamAggregate.Booklet", null)
                        .WithOne("PdfFile")
                        .HasForeignKey("SchoolExam.Domain.Entities.ExamAggregate.BookletPdfFile", "BookletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.ExamCourse", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.CourseAggregate.Course", "Course")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolExam.Domain.Entities.ExamAggregate.ExamParticipant", null)
                        .WithOne()
                        .HasForeignKey("SchoolExam.Domain.Entities.ExamAggregate.ExamCourse", "ExamId", "ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.ExamStudent", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.PersonAggregate.Student", "Student")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolExam.Domain.Entities.ExamAggregate.ExamParticipant", null)
                        .WithOne()
                        .HasForeignKey("SchoolExam.Domain.Entities.ExamAggregate.ExamStudent", "ExamId", "ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.TaskPdfFile", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.ExamAggregate.Exam", null)
                        .WithOne("TaskPdfFile")
                        .HasForeignKey("SchoolExam.Domain.Entities.ExamAggregate.TaskPdfFile", "ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.PersonAggregate.Student", b =>
                {
                    b.OwnsOne("SchoolExam.Domain.ValueObjects.QrCode", "QrCode", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Data")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("QrCodeData");

                            b1.HasKey("StudentId");

                            b1.HasIndex("Data")
                                .IsUnique();

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("QrCode")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.PersonAggregate.Teacher", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.SchoolAggregate.School", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.RemarkPdfFile", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.SubmissionAggregate.Submission", null)
                        .WithOne("RemarkPdfFile")
                        .HasForeignKey("SchoolExam.Domain.Entities.SubmissionAggregate.RemarkPdfFile", "SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.SubmissionPagePdfFile", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.SubmissionAggregate.SubmissionPage", null)
                        .WithOne("PdfFile")
                        .HasForeignKey("SchoolExam.Domain.Entities.SubmissionAggregate.SubmissionPagePdfFile", "SubmissionPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.SubmissionPdfFile", b =>
                {
                    b.HasOne("SchoolExam.Domain.Entities.SubmissionAggregate.Submission", null)
                        .WithOne("PdfFile")
                        .HasForeignKey("SchoolExam.Domain.Entities.SubmissionAggregate.SubmissionPdfFile", "SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.CourseAggregate.Course", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.Booklet", b =>
                {
                    b.Navigation("Pages");

                    b.Navigation("PdfFile")
                        .IsRequired();

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.BookletPage", b =>
                {
                    b.Navigation("SubmissionPage");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.ExamAggregate.Exam", b =>
                {
                    b.Navigation("Booklets");

                    b.Navigation("GradingTable");

                    b.Navigation("Participants");

                    b.Navigation("TaskPdfFile");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SchoolAggregate.School", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.Answer", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.Submission", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Pages");

                    b.Navigation("PdfFile");

                    b.Navigation("RemarkPdfFile");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.SubmissionAggregate.SubmissionPage", b =>
                {
                    b.Navigation("PdfFile")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.PersonAggregate.LegalGuardian", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.PersonAggregate.Student", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("LegalGuardians");
                });

            modelBuilder.Entity("SchoolExam.Domain.Entities.PersonAggregate.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
